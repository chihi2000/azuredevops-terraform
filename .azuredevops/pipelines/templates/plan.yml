parameters:
  - name: environment
    type: string
  - name: workingDirectory
    type: string

jobs:
  # security scan for terraform
  - job: SecurityScan
    displayName: "Security Scan - ${{ parameters.environment }}"
    pool:
      name: terraform-agents
    
    steps:
      - checkout: self
      
      - task: Bash@3
        displayName: 'Install tfsec'
        inputs:
          targetType: 'inline'
          script: |
            curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
            tfsec --version

      - task: Bash@3
        displayName: 'Security Scan - tfsec'
        inputs:
          targetType: 'inline'
          workingDirectory: environments/${{ parameters.environment }}
          script: |
            tfsec . --format junit --out tfsec-results.xml
            tfsec . --format default --minimum-severity MEDIUM
        continueOnError: false

      - task: PublishTestResults@2
        displayName: 'Publish Security Results'
        condition: always()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'environments/${{ parameters.environment }}/tfsec-results.xml'
          testRunTitle: 'tfsec - ${{ parameters.environment }}'
          failTaskOnFailedTests: false

  # plan job (only runs if security scan passes)
  - job: Plan
    displayName: "Terraform Plan ${{ parameters.environment }}"
    dependsOn: SecurityScan
    condition: succeeded()
    pool:
      name: terraform-agents 
   
    steps:
      - checkout: self
      
      - task: TerraformTaskV4@4
        displayName: Terraform Init
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: environments/${{ parameters.environment }}
          backendServiceArm: 'connect-terraform-azure'
          backendAzureRmResourceGroupName: '$(BACKEND_RESOURCE_GROUP_NAME)'
          backendAzureRmStorageAccountName: '$(BACKEND_STORAGE_ACCOUNT_NAME)'
          backendAzureRmContainerName: '$(BACKEND_CONTAINER_NAME)'
          backendAzureRmKey: '$(BACKEND_KEY)'
      
      - script: |
          terraform validate
          echo "Validation completed"
        workingDirectory: environments/${{ parameters.environment }}
        displayName: 'Terraform Validate'
      
      - task: TerraformTaskV4@4
        displayName: 'Terraform Plan'
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: environments/${{ parameters.environment }}
          environmentServiceNameAzureRM: 'connect-terraform-azure'
          commandOptions: '-out=tfplan'
      
      - task: PublishPipelineArtifact@1
        displayName: 'Publish Terraform Plan Artifact'
        inputs:
          targetPath: 'environments/${{ parameters.environment }}/tfplan'
          artifactName: 'tfplan_${{ parameters.environment }}'
          publishLocation: 'pipeline'
